[
  {
    "comment": "Return the string encoding (the most probable)",
    "ret": "mjb_encoding",
    "name": "string_encoding",
    "attributes": ["MJB_PURE"],
    "args": ["const char *buffer", "size_t size"]
  },
  {
    "comment": "Return true if the string is encoded in UTF-8",
    "ret": "bool",
    "name": "string_is_utf8",
    "attributes": ["MJB_PURE"],
    "args": ["const char *buffer", "size_t size"]
  },
  {
    "comment": "Return true if the string is encoded in UTF-16BE or UTF-16LE",
    "ret": "bool",
    "name": "string_is_utf16",
    "attributes": ["MJB_PURE"],
    "args": ["const char *buffer", "size_t size"]
  },
  {
    "comment": "Return true if the string is encoded in ASCII",
    "ret": "bool",
    "name": "string_is_ascii",
    "attributes": ["MJB_PURE"],
    "args": ["const char *buffer", "size_t size"]
  },
  {
    "comment": "Encode a codepoint to a string",
    "ret": "unsigned int",
    "name": "codepoint_encode",
    "attributes": [],
    "args": ["mjb_codepoint codepoint", "char *buffer", "size_t size", "mjb_encoding encoding"]
  },
  {
    "comment": "Return the length of a string",
    "ret": "size_t",
    "name": "strnlen",
    "attributes": ["MJB_PURE"],
    "args": ["const char *buffer", "size_t max_length", "mjb_encoding encoding"]
  },
  {
    "comment": "Compare two strings",
    "ret": "size_t",
    "name": "strncmp",
    "attributes": ["MJB_PURE"],
    "args": ["const char *s1", "const char *s2", "size_t max_length", "mjb_encoding encoding"]
  },
  {
    "comment": "Return change string case",
    "ret": "char *",
    "name": "case",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["const char *buffer", "size_t length", "mjb_case_type type", "mjb_encoding encoding"]
  },
  {
    "comment": "Return true if the codepoint is valid",
    "ret": "bool",
    "name": "codepoint_is_valid",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return the codepoint character",
    "ret": "bool",
    "name": "codepoint_character",
    "attributes": ["MJB_NONNULL(2)"],
    "args": ["mjb_codepoint codepoint", "mjb_character *character"]
  },
  {
    "comment": "Return true if the codepoint has the category",
    "ret": "bool",
    "name": "codepoint_category_is",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint", "mjb_category category"]
  },
  {
    "comment": "Return true if the codepoint is graphic",
    "ret": "bool",
    "name": "codepoint_is_graphic",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return true if the codepoint is combining",
    "ret": "bool",
    "name": "codepoint_is_combining",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return true if the category is combining",
    "ret": "bool",
    "name": "category_is_combining",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_category category"]
  },
  {
    "comment": "Return the character block",
    "ret": "bool",
    "name": "character_block",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint", "mjb_codepoint_block *block"]
  },
  {
    "comment": "Return the codepoint lowercase codepoint",
    "ret": "mjb_codepoint",
    "name": "codepoint_to_lowercase",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return the codepoint uppercase codepoint",
    "ret": "mjb_codepoint",
    "name": "codepoint_to_uppercase",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return the codepoint titlecase codepoint",
    "ret": "mjb_codepoint",
    "name": "codepoint_to_titlecase",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Normalize a string",
    "ret": "bool",
    "name": "normalize",
    "attributes": ["MJB_NONNULL(1, 5)"],
    "args": ["const char *buffer", "size_t size", "mjb_encoding encoding", "mjb_normalization form", "mjb_normalization_result *result"]
  },
  {
    "comment": "Check if a string is normalized",
    "ret": "mjb_quick_check_result",
    "name": "string_is_normalized",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["const char *buffer", "size_t size", "mjb_encoding encoding", "mjb_normalization form"]
  },
  {
    "comment": "Get the next character from the string",
    "ret": "bool",
    "name": "next_character",
    "attributes": ["MJB_NONNULL(1, 4)"],
    "args": ["const char *buffer", "size_t size", "mjb_encoding encoding", "mjb_next_character_fn fn"]
  },
  {
    "comment": "Unicode line break algorithm",
    "ret": "char *",
    "name": "line_break",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["const char *buffer", "size_t size", "bool is_eot", "mjb_encoding encoding"]
  },
  {
    "comment": "Word and grapheme cluster breaking",
    "ret": "bool",
    "name": "segmentation",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["const char *buffer", "size_t size", "mjb_encoding encoding"]
  },
  {
    "comment": "Return the plane of the codepoint",
    "ret": "mjb_plane",
    "name": "codepoint_plane",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return true if the plane is valid",
    "ret": "bool",
    "name": "plane_is_valid",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_plane plane"]
  },
  {
    "comment": "Return the name of a plane, NULL if the place specified is not valid",
    "ret": "const char *",
    "name": "plane_name",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_plane plane", "bool abbreviation"]
  },
  {
    "comment": "Return hangul syllable name",
    "ret": "bool",
    "name": "hangul_syllable_name",
    "attributes": ["MJB_NONNULL(2)"],
    "args": ["mjb_codepoint codepoint", "char *buffer", "size_t size"]
  },
  {
    "comment": "Hangul syllable decomposition",
    "ret": "bool",
    "name": "hangul_syllable_decomposition",
    "attributes": ["MJB_NODISCARD", "MJB_NONNULL(2)"],
    "args": ["mjb_codepoint codepoint", "mjb_codepoint *codepoints"]
  },
  {
    "comment": "Hangul syllable composition",
    "ret": "size_t",
    "name": "hangul_syllable_composition",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["mjb_buffer_character *characters", "size_t characters_len"]
  },
  {
    "comment": "Return if the codepoint is an hangul L",
    "ret": "bool",
    "name": "codepoint_is_hangul_l",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return if the codepoint is an hangul V",
    "ret": "bool",
    "name": "codepoint_is_hangul_v",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return if the codepoint is an hangul T",
    "ret": "bool",
    "name": "codepoint_is_hangul_t",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return if the codepoint is an hangul jamo",
    "ret": "bool",
    "name": "codepoint_is_hangul_jamo",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return if the codepoint is an hangul syllable",
    "ret": "bool",
    "name": "codepoint_is_hangul_syllable",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Return if the codepoint is CJK ideograph",
    "ret": "bool",
    "name": "codepoint_is_cjk_ideograph",
    "attributes": ["MJB_CONST"],
    "args": ["mjb_codepoint codepoint"]
  },
  {
    "comment": "Output the current library version (MJB_VERSION)",
    "ret": "const char *",
    "name": "version",
    "attributes": ["MJB_CONST"],
    "args": []
  },
  {
    "comment": "Output the current library version number (MJB_VERSION_NUMBER)",
    "ret": "unsigned int",
    "name": "version_number",
    "attributes": ["MJB_CONST"],
    "args": []
  },
  {
    "comment": "Output the current supported unicode version (MJB_UNICODE_VERSION)",
    "ret": "const char *",
    "name": "unicode_version",
    "attributes": ["MJB_CONST"],
    "args": []
  },
  {
    "comment": "Initialize the library. Not needed to be called",
    "ret": "bool",
    "name": "initialize",
    "attributes": ["MJB_NODISCARD"],
    "args": []
  },
  {
    "comment": "Initialize the library with custom values. Not needed to be called",
    "ret": "bool",
    "name": "initialize_v2",
    "attributes": ["MJB_NODISCARD"],
    "args": ["mjb_alloc_fn alloc_fn", "mjb_realloc_fn realloc_fn", "mjb_free_fn free_fn"]
  },
  {
    "comment": "Shutdown the library. Not needed to be called",
    "ret": "void",
    "name": "shutdown",
    "attributes": [],
    "args": []
  },
  {
    "comment": "Allocate and zero memory",
    "ret": "void *",
    "name": "alloc",
    "attributes": ["MJB_NODISCARD"],
    "args": ["size_t size"]
  },
  {
    "comment": "Reallocate memory",
    "ret": "void *",
    "name": "realloc",
    "attributes": ["MJB_NODISCARD", "MJB_NONNULL(1)"],
    "args": ["void *ptr", "size_t new_size"]
  },
  {
    "comment": "Free memory",
    "ret": "void",
    "name": "free",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["void *ptr"]
  }
]
