[
  {
    "comment": "Return the codepoint character",
    "ret": "bool",
    "name": "codepoint_character",
    "attributes": ["MJB_NONNULL(2)"],
    "args": ["codepoint", "character"],
    "args_types": ["mjb_codepoint", "mjb_character *"],
    "args_description": ["The codepoint to check", "The character to store the result"],
    "args_return": [false, true],
    "wasm": true
  },
  {
    "comment": "Normalize a string to NFC/NFKC/NFD/NFKD form",
    "ret": "bool",
    "name": "normalize",
    "attributes": ["MJB_NONNULL(1, 5)"],
    "args": ["buffer", "size", "encoding", "form", "result"],
    "args_types": ["const char *", "size_t", "mjb_encoding", "mjb_normalization", "mjb_normalization_result *"],
    "args_description": [
      "The string to normalize",
      "The size of the string, in bytes",
      "The encoding of the string",
      "The normalization form to use",
      "The result to store the result"
    ],
    "args_return": [false, false, false, false, true],
    "wasm": true
  },
  {
    "comment": "Return the next character from a string",
    "ret": "bool",
    "name": "next_character",
    "attributes": ["MJB_NONNULL(1, 4)"],
    "args": ["buffer", "size", "encoding", "fn"],
    "args_types": ["const char *", "size_t", "mjb_encoding", "mjb_next_character_fn"],
    "args_description": [
      "The string to check",
      "The size of the string, in bytes",
      "The encoding of the string",
      "The function to call for each character"
    ],
    "args_return": [false, false, false, true],
    "wasm": true
  },
  {
    "comment": "Check if a string is normalized to NFC/NFKC/NFD/NFKD form",
    "ret": "mjb_quick_check_result",
    "name": "string_is_normalized",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["buffer", "size", "encoding", "form"],
    "args_types": ["const char *", "size_t", "mjb_encoding", "mjb_normalization"],
    "args_description": [
      "The string to check",
      "The size of the string, in bytes",
      "The encoding of the string",
      "The normalization form to check"
    ],
    "args_return": [false, false, false, false],
    "wasm": true
  },
  {
    "comment": "Return the string encoding (the most probable)",
    "ret": "mjb_encoding",
    "name": "string_encoding",
    "attributes": ["MJB_PURE"],
    "args": ["buffer", "size"],
    "args_types": ["const char *", "size_t"],
    "args_description": ["The string to check", "The size of the string, in bytes"],
    "args_return": [false, false],
    "wasm": true
  },
  {
    "comment": "Return true if the string is encoded in UTF-8",
    "ret": "bool",
    "name": "string_is_utf8",
    "attributes": ["MJB_PURE"],
    "args": ["buffer", "size"],
    "args_types": ["const char *", "size_t"],
    "args_description": ["The string to check", "The size of the string, in bytes"],
    "args_return": [false, false],
    "wasm": true
  },
  {
    "comment": "Return true if the string is encoded in UTF-16BE or UTF-16LE",
    "ret": "bool",
    "name": "string_is_utf16",
    "attributes": ["MJB_PURE"],
    "args": ["buffer", "size"],
    "args_types": ["const char *", "size_t"],
    "args_description": ["The string to check", "The size of the string, in bytes"],
    "args_return": [false, false],
    "wasm": true
  },
  {
    "comment": "Return true if the string is encoded in ASCII",
    "ret": "bool",
    "name": "string_is_ascii",
    "attributes": ["MJB_PURE"],
    "args": ["buffer", "size"],
    "args_types": ["const char *", "size_t"],
    "args_description": ["The string to check", "The size of the string, in bytes"],
    "args_return": [false, false],
    "wasm": true
  },
  {
    "comment": "Encode a codepoint to a string",
    "ret": "unsigned int",
    "name": "codepoint_encode",
    "attributes": [],
    "args": ["codepoint", "buffer", "size", "encoding"],
    "args_types": ["mjb_codepoint", "char *", "size_t", "mjb_encoding"],
    "args_description": [
      "The codepoint to encode",
      "The buffer to encode the codepoint to",
      "The size of the buffer, in bytes",
      "The encoding to use"
    ],
    "args_return": [false, true, false, false],
    "wasm": true
  },
  {
    "comment": "Return the length of a string",
    "ret": "size_t",
    "name": "strnlen",
    "attributes": ["MJB_PURE"],
    "args": ["buffer", "max_length", "encoding"],
    "args_types": ["const char *", "size_t", "mjb_encoding"],
    "args_description": [
      "The string to check",
      "The maximum length of the string, in bytes",
      "The encoding of the string"
    ],
    "args_return": [false, false, false],
    "wasm": true
  },
  {
    "comment": "Compare two strings",
    "ret": "size_t",
    "name": "strncmp",
    "attributes": ["MJB_PURE"],
    "args": ["s1", "s2", "max_length", "encoding"],
    "args_types": ["const char *", "const char *", "size_t", "mjb_encoding"],
    "args_description": [
      "The first string to compare",
      "The second string to compare",
      "The maximum length of the strings, in bytes",
      "The encoding of the strings"
    ],
    "args_return": [false, false, false, false],
    "wasm": true
  },
  {
    "comment": "Change string case",
    "ret": "char *",
    "name": "case",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["buffer", "length", "type", "encoding"],
    "args_types": ["const char *", "size_t", "mjb_case_type", "mjb_encoding"],
    "args_description": [
      "The string to change case",
      "The length of the string, in bytes",
      "The type of case change",
      "The encoding of the string"
    ],
    "args_return": [false, false, false, false],
    "wasm": true
  },
  {
    "comment": "Return true if the codepoint is valid",
    "ret": "bool",
    "name": "codepoint_is_valid",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint to check"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return true if the codepoint has the category",
    "ret": "bool",
    "name": "codepoint_category_is",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint", "category"],
    "args_types": ["mjb_codepoint", "mjb_category"],
    "args_description": ["The codepoint to check", "The category to check"],
    "args_return": [false, false],
    "wasm": true
  },
  {
    "comment": "Return true if the codepoint is graphic",
    "ret": "bool",
    "name": "codepoint_is_graphic",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint to check"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return true if the codepoint is combining",
    "ret": "bool",
    "name": "codepoint_is_combining",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint to check"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return true if the category is combining",
    "ret": "bool",
    "name": "category_is_combining",
    "attributes": ["MJB_CONST"],
    "args": ["category"],
    "args_types": ["mjb_category"],
    "args_description": ["The category to check"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return the character block",
    "ret": "bool",
    "name": "character_block",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint", "block"],
    "args_types": ["mjb_codepoint", "mjb_codepoint_block *"],
    "args_description": ["The codepoint to check", "The block to store the result"],
    "args_return": [false, true],
    "wasm": true
  },
  {
    "comment": "Return the codepoint lowercase codepoint",
    "ret": "mjb_codepoint",
    "name": "codepoint_to_lowercase",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return the codepoint uppercase codepoint",
    "ret": "mjb_codepoint",
    "name": "codepoint_to_uppercase",
    "attributes": ["MJB_CONST"],
      "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return the codepoint titlecase codepoint",
    "ret": "mjb_codepoint",
    "name": "codepoint_to_titlecase",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Unicode line break algorithm",
    "ret": "mjb_line_break *",
    "name": "break_line",
    "attributes": ["MJB_NONNULL(1, 4)"],
    "args": ["buffer", "size", "encoding", "output_size"],
    "args_types": ["const char *", "size_t", "mjb_encoding", "size_t *"],
    "args_description": [
      "The string to check",
      "The size of the string, in bytes",
      "The encoding of the string",
      "The size of the output"
    ],
    "wasm": true
  },
  {
    "comment": "Word and grapheme cluster breaking",
    "ret": "bool",
    "name": "segmentation",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["buffer", "size", "encoding"],
    "args_types": ["const char *", "size_t", "mjb_encoding"],
    "args_description": [
      "The string to check",
      "The size of the string, in bytes",
      "The encoding of the string"
    ],
    "args_return": [false, false, false],
    "wasm": true
  },
  {
    "comment": "Return the plane of the codepoint",
    "ret": "mjb_plane",
    "name": "codepoint_plane",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return true if the plane is valid",
    "ret": "bool",
    "name": "plane_is_valid",
    "attributes": ["MJB_CONST"],
    "args": ["plane"],
    "args_types": ["mjb_plane"],
    "args_description": ["The plane to check"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return the name of a plane, NULL if the place specified is not valid",
    "ret": "const char *",
    "name": "plane_name",
    "attributes": ["MJB_CONST"],
    "args": ["plane", "abbreviation"],
    "args_types": ["mjb_plane", "bool"],
    "args_description": ["The plane to check", "Whether to use an abbreviation"],
    "args_return": [false, false],
    "wasm": true
  },
  {
    "comment": "Return hangul syllable name",
    "ret": "bool",
    "name": "hangul_syllable_name",
    "attributes": ["MJB_NONNULL(2)"],
    "args": ["codepoint", "buffer", "size"],
    "args_types": ["mjb_codepoint", "char *", "size_t"],
    "args_description": [
      "The codepoint",
      "The buffer to store the result",
      "The size of the buffer"
    ],
    "args_return": [false, true, false],
    "wasm": false
  },
  {
    "comment": "Hangul syllable decomposition",
    "ret": "bool",
    "name": "hangul_syllable_decomposition",
    "attributes": ["MJB_NODISCARD", "MJB_NONNULL(2)"],
    "args": ["codepoint", "codepoints"],
    "args_types": ["mjb_codepoint", "mjb_codepoint *"],
    "args_description": [
      "The codepoint",
      "The codepoints to store the result"
    ],
    "args_return": [false, true],
    "wasm": false
  },
  {
    "comment": "Hangul syllable composition",
    "ret": "size_t",
    "name": "hangul_syllable_composition",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["characters", "characters_len"],
    "args_types": ["mjb_buffer_character *", "size_t"],
    "args_description": [
      "The characters to compose",
      "The length of the characters"
    ],
    "args_return": [false],
    "wasm": false
  },
  {
    "comment": "Return if the codepoint is an hangul L",
    "ret": "bool",
    "name": "codepoint_is_hangul_l",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": false
  },
  {
    "comment": "Return if the codepoint is an hangul V",
    "ret": "bool",
    "name": "codepoint_is_hangul_v",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": false
  },
  {
    "comment": "Return if the codepoint is an hangul T",
    "ret": "bool",
    "name": "codepoint_is_hangul_t",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": false
  },
  {
    "comment": "Return if the codepoint is an hangul jamo",
    "ret": "bool",
    "name": "codepoint_is_hangul_jamo",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": false
  },
  {
    "comment": "Return if the codepoint is an hangul syllable",
    "ret": "bool",
    "name": "codepoint_is_hangul_syllable",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Return if the codepoint is CJK ideograph",
    "ret": "bool",
    "name": "codepoint_is_cjk_ideograph",
    "attributes": ["MJB_CONST"],
    "args": ["codepoint"],
    "args_types": ["mjb_codepoint"],
    "args_description": ["The codepoint"],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Output the current library version (MJB_VERSION)",
    "ret": "const char *",
    "name": "version",
    "attributes": ["MJB_CONST"],
    "args": [],
    "args_types": [],
    "args_description": [],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Output the current library version number (MJB_VERSION_NUMBER)",
    "ret": "unsigned int",
    "name": "version_number",
    "attributes": ["MJB_CONST"],
    "args": [],
    "args_types": [],
    "args_description": [],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Output the current supported unicode version (MJB_UNICODE_VERSION)",
    "ret": "const char *",
    "name": "unicode_version",
    "attributes": ["MJB_CONST"],
    "args": [],
    "args_types": [],
    "args_description": [],
    "args_return": [false],
    "wasm": true
  },
  {
    "comment": "Initialize the library. Not needed to be called",
    "ret": "bool",
    "name": "initialize",
    "attributes": ["MJB_NODISCARD"],
    "args": [],
    "args_types": [],
    "args_description": [],
    "wasm": false
  },
  {
    "comment": "Initialize the library with custom values. Not needed to be called",
    "ret": "bool",
    "name": "initialize_v2",
    "attributes": ["MJB_NODISCARD"],
    "args": ["alloc_fn", "realloc_fn", "free_fn", "db", "db_size"],
    "args_types": ["mjb_alloc_fn", "mjb_realloc_fn", "mjb_free_fn", "const char *", "size_t"],
    "args_description": [
      "The function to allocate memory",
      "The function to reallocate memory",
      "The function to free memory",
      "The database content of path to use",
      "The size of the database content"
    ],
    "args_return": [false, false, false, false],
    "wasm": true
  },
  {
    "comment": "Shutdown the library. Not needed to be called",
    "ret": "void",
    "name": "shutdown",
    "attributes": [],
    "args": [],
    "args_types": [],
    "args_description": [],
    "args_return": [],
    "wasm": false
  },
  {
    "comment": "Allocate and zero memory",
    "ret": "void *",
    "name": "alloc",
    "attributes": ["MJB_NODISCARD"],
    "args": ["size"],
    "args_types": ["size_t"],
    "args_description": ["The size of the memory to allocate"],
    "args_return": [false],
    "wasm": false
  },
  {
    "comment": "Reallocate memory",
    "ret": "void *",
    "name": "realloc",
    "attributes": ["MJB_NODISCARD", "MJB_NONNULL(1)"],
    "args": ["ptr", "new_size"],
    "args_types": ["void *", "size_t"],
    "args_description": ["The pointer to reallocate", "The new size of the memory"],
    "args_return": [false],
    "wasm": false
  },
  {
    "comment": "Free memory",
    "ret": "void",
    "name": "free",
    "attributes": ["MJB_NONNULL(1)"],
    "args": ["ptr"],
    "args_types": ["void *"],
    "args_description": ["The pointer to free"],
    "args_return": [false],
    "wasm": false
  }
]
