import { readFileSync, writeFileSync } from 'fs';
import path from 'path';

function loadFile(file: string) {
  const srcDir = '../../src';
  let fileContent = readFileSync(path.join(srcDir, file), 'utf-8');
  console.log(`Loading ${file}`);

  // Replace #pragma once with comment
  const pragmaRegex = /#pragma once/g;
  fileContent = fileContent.replace(pragmaRegex, match => `// ${match}`);

  return fileContent;
}

export async function generateAmalgamation() {
  const headers = [
    'breaking.h',
    'buffer.h',
    'east-asian-width.h',
    'locales.h',
    'segmentation.h',
  ];

  let header = loadFile('mojibake.h');

  let file = loadFile('unicode.h');
  header = header.replace(/#include "unicode\.h"\n/g, match => `// ${match}\n${file}`);
  header = header.replace(/The Mojibake library\n \*/, match =>
    `This file is automatically generated. Do not edit.\n *\n * ${match}`);

  // Generate main header
  writeFileSync('../../mojibake.h', header);

  let source = `/**
 * The Mojibake library
 *
 * This file is distributed under the MIT License. See LICENSE for details.
 *
 * This file is an amalgamation of all Mojibake source files. It is automatically generated. Do not
 * edit. If you want to generate it, run the following command:
 *
 * make generate-amalgamation
 */\n\n#include "mojibake.h"\n`;

  for(const header of headers) {
    let content = `\n// ----------\n// ${header}\n// ----------\n\n` + loadFile(header);
    content = content.replace(/#include "mojibake\.h"/g, match => `// ${match}`);

    source += content;
  }

  source += `\n// ----------\n// Start of SQLite\n// ----------\n\n`;

  // Read SQLite compile-time options from CMakeLists.txt
  const cmakeFile = readFileSync('../../src/sqlite3/CMakeLists.txt', 'utf-8');
  const defineRegex = /SQLITE_[A-Z_]+(?:=[0-9]+)?/g;
  const defines = cmakeFile.match(defineRegex);

  source += '// SQLite compile-time options\n';

  // Filter out WASM-specific defines in the commented parts
  const excludedDefines = ['SQLITE_OS_OTHER', 'SQLITE_SYSTEM_MALLOC'];

  for(let define of defines ?? []) {
    // Skip excluded defines
    if (excludedDefines.some(excluded => define.includes(excluded))) {
      continue;
    }
    define = define.replace(/=/g, ' ');
    source += `#define ${define}\n`;
  }

  source += '\n';

  source += loadFile('sqlite3/sqlite3.c');

  source += `\n// ----------\n// Start of sources\n// ----------\n
#include <stdbool.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdint.h>

MJB_EXPORT mojibake mjb_global;\n`;

  const sources = [
    'mojibake-internal.h',
    'utf8.h',
    'utf16.h',
    'utf32.h',
    'utf.h',
    'breaking.c',
    'buffer.c',
    'case.c',
    'codepoint.c',
    'cjk.c',
    'encoding.c',
    'east-asian-width.c',
    'emoji.c',
    'hangul.c',
    'next.c',
    'mojibake.c',
    'normalization.c',
    'quick-check.c',
    'plane.c',
    'segmentation.c',
    'string.c',
    'version.c',
  ];

  for(const file of sources) {
    let content = `\n// ----------\n// ${file}\n// ----------\n\n` + loadFile(file);
    content = content.replace(/#include .+/g, match => `// ${match}`);
    content = content.replace(/extern mojibake mjb_global;/g, match => `// ${match}`);

    source += content;
  }

  writeFileSync('../../mojibake.c', source);
}
