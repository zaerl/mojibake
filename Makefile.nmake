!IFNDEF BUILD_DIR
BUILD_DIR=build
!ENDIF

!IFNDEF WASM_BUILD_DIR
WASM_BUILD_DIR=build-wasm
!ENDIF

!IFNDEF BUILD_TYPE
BUILD_TYPE=Release
!ENDIF

# Aggregate
all: configure build

# C targets
configure:
	@cmake -S . -B $(BUILD_DIR) -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)

# C targets
build: configure
	@cmake --build $(BUILD_DIR)

# C++ targets
configure-cpp:
	@cmake -S . -B $(BUILD_DIR) -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) -DBUILD_CPP=ON

# C++ targets
build-cpp: configure-cpp
	@cmake --build $(BUILD_DIR)

# WASM targets
configure-wasm:
	@emcmake cmake -S . -B $(WASM_BUILD_DIR) -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) -DBUILD_WASM=ON

# WASM targets
build-wasm: configure-wasm
	@cd $(WASM_BUILD_DIR) && emmake nmake

# WASM targets
wasm: build-wasm
	@cd utils\generate && npm run generate -- site

# Generate TESTS.md file
coverage:
	@cd utils\generate && npm run coverage

# Generate source files and database
generate:
	@cd utils\generate && generate.bat $(ARGS)

# Generate locale files
generate-locales:
	@cd utils\generate && generate-locales.bat

# WASM targets
generate-amalgamation:
	@cd utils\generate && npm run generate -- amalgamation

# Run tests
test: mojibake.db
	@cmake -S . -B $(BUILD_DIR) -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Test
	@cmake --build $(BUILD_DIR)
	@$(BUILD_DIR)\tests\mojibake-test.exe $(ARGS)

# Run tests with C++ compiler
test-cpp: mojibake.db
	@cmake -S . -B $(BUILD_DIR) -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Test -DBUILD_CPP=ON
	@cmake --build $(BUILD_DIR)
	@$(BUILD_DIR)\tests\mojibake-test.exe $(ARGS)

# Run tests using CTest
ctest: mojibake.db
	@cmake -S . -B $(BUILD_DIR) -G "NMake Makefiles" -DCMAKE_BUILD_TYPE=Test
	@cmake --build $(BUILD_DIR)
	@cd $(BUILD_DIR) && ctest $(ARGS)

# Clean targets
clean-build:
	@cmake --build $(BUILD_DIR) --target clean --config $(BUILD_TYPE)

clean-native:
	@if exist $(BUILD_DIR) rmdir /S /Q $(BUILD_DIR)

clean-wasm:
	@if exist $(WASM_BUILD_DIR) rmdir /S /Q $(WASM_BUILD_DIR)

clean: clean-native clean-wasm

# Help
help:
	@echo Available targets:
	@echo   all          - Build the project (default)
	@echo   build-cpp    - Build the project with C++ compiler
	@echo   test-cpp     - Build and run tests with C++ compiler
	@echo   wasm         - Build the project for WebAssembly
	@echo   test         - Build and run tests
	@echo   ctest        - Build and run tests using CTest
	@echo   clean        - Remove build artifacts
	@echo   clean-wasm   - Remove WASM build artifacts
	@echo   clean-native - Remove all build artifacts
	@echo   generate     - Regenerate source files
	@echo   coverage     - Run coverage analysis
