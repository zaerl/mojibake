/**
 * The mojibake library
 *
 * This file is distributed under the MIT License. See LICENSE for details.
 */

#ifndef MB_MOJIBAKE_H
#define MB_MOJIBAKE_H

#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#define MB_VERSION "1.0.0"
#define MB_VERSION_NUMBER 0x100 /* MAJOR << 8 && MINOR << 4 && REVISION */
#define MB_VERSION_MAJOR 1
#define MB_VERSION_MINOR 0
#define MB_VERSION_REVISION 0

#define MB_UNICODE_VERSION "13.0"
#define MB_UNICODE_VERSION_MAJOR 13
#define MB_UNICODE_VERSION_MINOR 0

/*
 A unicode codepoint
 [see: https://www.unicode.org/glossary/#code_point]
 */
typedef uint32_t mb_codepoint;

#define MB_CODEPOINT_MIN 0x0
#define MB_CODEPOINT_MAX 0x10FFFF /* Maximum valid unicode code point */
#define MB_CODEPOINT_REPLACEMENT = 0xFFFD /* The character used when there is invalid data */

/*
 A unicode character
 [see: https://www.unicode.org/glossary/#character]
 */
typedef struct mb_character {
    mb_codepoint codepoint;
    const unsigned char* name;
    unsigned short block;
    unsigned short category;
    const unsigned char* combining;
    unsigned short bidirectional;
    unsigned short decomposition;
    const unsigned char* decimal;
    const unsigned char* digit;
    const unsigned char* numeric;
    bool mirrored;
    const unsigned char* uppercase;
    const unsigned char* lowercase;
    const unsigned char* titlecase;
} mb_character;

/*
 Unicode codepoint general category
 [see: https://www.unicode.org/glossary/#general_category]
 */
typedef uint32_t mb_category;

#define MB_CATEGORY_NUM 30

#define MB_CATEGORY_LU 0 /* Lu Letter, Uppercase */
#define MB_CATEGORY_LL 1 /* Ll Letter, Lowercase */
#define MB_CATEGORY_LT 2 /* Lt Letter, Titlecase */
#define MB_CATEGORY_LM 3 /* Lm Letter, Modifier */
#define MB_CATEGORY_LO 4 /* Lo Letter, Other */
#define MB_CATEGORY_MN 5 /* Mn Mark, Non-Spacing */
#define MB_CATEGORY_MC 6 /* Mc Mark, Spacing Combining */
#define MB_CATEGORY_ME 7 /* Me Mark, Enclosing */
#define MB_CATEGORY_ND 8 /* Nd Number, Decimal Digit */
#define MB_CATEGORY_NL 9 /* Nl Number, Letter */
#define MB_CATEGORY_NO 10 /* No Number, Other */
#define MB_CATEGORY_PC 11 /* Pc Punctuation, Connector */
#define MB_CATEGORY_PD 12 /* Pd Punctuation, Dash */
#define MB_CATEGORY_PS 13 /* Ps Punctuation, Open */
#define MB_CATEGORY_PE 14 /* Pe Punctuation, Close */
#define MB_CATEGORY_PI 15 /* Pi Punctuation, Initial quote */
#define MB_CATEGORY_PF 16 /* Pf Punctuation, Final quote */
#define MB_CATEGORY_PO 17 /* Po Punctuation, Other */
#define MB_CATEGORY_SM 18 /* Sm Symbol, Math */
#define MB_CATEGORY_SC 19 /* Sc Symbol, Currency */
#define MB_CATEGORY_SK 20 /* Sk Symbol, Modifier */
#define MB_CATEGORY_SO 21 /* So Symbol, Other */
#define MB_CATEGORY_ZS 22 /* Zs Separator, Space */
#define MB_CATEGORY_ZL 23 /* Zl Separator, Line */
#define MB_CATEGORY_ZP 24 /* Zp Separator, Paragraph */
#define MB_CATEGORY_CC 25 /* Cc Other, Control */
#define MB_CATEGORY_CF 26 /* Cf Other, Format */
#define MB_CATEGORY_CS 27 /* Cs Other, Surrogate */
#define MB_CATEGORY_CO 28 /* Co Other, Private Use */
#define MB_CATEGORY_CN 29 /* Cn Other, Not Assigned */

/*
 Unicode block
 [see: https://www.unicode.org/glossary/#block]
*/
typedef struct mb_block {
  char* name;
  uint32_t start;
  uint32_t end;
} mb_block;

#define MB_BLOCK_NUM 308

#define MB_BLOCK_BASIC_LATIN 0
#define MB_BLOCK_LATIN_1_SUPPLEMENT 1
#define MB_BLOCK_LATIN_EXTENDED_A 2
#define MB_BLOCK_LATIN_EXTENDED_B 3
#define MB_BLOCK_IPA_EXTENSIONS 4
#define MB_BLOCK_SPACING_MODIFIER_LETTERS 5
#define MB_BLOCK_COMBINING_DIACRITICAL_MARKS 6
#define MB_BLOCK_GREEK_AND_COPTIC 7
#define MB_BLOCK_CYRILLIC 8
#define MB_BLOCK_CYRILLIC_SUPPLEMENT 9
#define MB_BLOCK_ARMENIAN 10
#define MB_BLOCK_HEBREW 11
#define MB_BLOCK_ARABIC 12
#define MB_BLOCK_SYRIAC 13
#define MB_BLOCK_ARABIC_SUPPLEMENT 14
#define MB_BLOCK_THAANA 15
#define MB_BLOCK_NKO 16
#define MB_BLOCK_SAMARITAN 17
#define MB_BLOCK_MANDAIC 18
#define MB_BLOCK_SYRIAC_SUPPLEMENT 19
#define MB_BLOCK_ARABIC_EXTENDED_A 20
#define MB_BLOCK_DEVANAGARI 21
#define MB_BLOCK_BENGALI 22
#define MB_BLOCK_GURMUKHI 23
#define MB_BLOCK_GUJARATI 24
#define MB_BLOCK_ORIYA 25
#define MB_BLOCK_TAMIL 26
#define MB_BLOCK_TELUGU 27
#define MB_BLOCK_KANNADA 28
#define MB_BLOCK_MALAYALAM 29
#define MB_BLOCK_SINHALA 30
#define MB_BLOCK_THAI 31
#define MB_BLOCK_LAO 32
#define MB_BLOCK_TIBETAN 33
#define MB_BLOCK_MYANMAR 34
#define MB_BLOCK_GEORGIAN 35
#define MB_BLOCK_HANGUL_JAMO 36
#define MB_BLOCK_ETHIOPIC 37
#define MB_BLOCK_ETHIOPIC_SUPPLEMENT 38
#define MB_BLOCK_CHEROKEE 39
#define MB_BLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS 40
#define MB_BLOCK_OGHAM 41
#define MB_BLOCK_RUNIC 42
#define MB_BLOCK_TAGALOG 43
#define MB_BLOCK_HANUNOO 44
#define MB_BLOCK_BUHID 45
#define MB_BLOCK_TAGBANWA 46
#define MB_BLOCK_KHMER 47
#define MB_BLOCK_MONGOLIAN 48
#define MB_BLOCK_UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED 49
#define MB_BLOCK_LIMBU 50
#define MB_BLOCK_TAI_LE 51
#define MB_BLOCK_NEW_TAI_LUE 52
#define MB_BLOCK_KHMER_SYMBOLS 53
#define MB_BLOCK_BUGINESE 54
#define MB_BLOCK_TAI_THAM 55
#define MB_BLOCK_COMBINING_DIACRITICAL_MARKS_EXTENDED 56
#define MB_BLOCK_BALINESE 57
#define MB_BLOCK_SUNDANESE 58
#define MB_BLOCK_BATAK 59
#define MB_BLOCK_LEPCHA 60
#define MB_BLOCK_OL_CHIKI 61
#define MB_BLOCK_CYRILLIC_EXTENDED_C 62
#define MB_BLOCK_GEORGIAN_EXTENDED 63
#define MB_BLOCK_SUNDANESE_SUPPLEMENT 64
#define MB_BLOCK_VEDIC_EXTENSIONS 65
#define MB_BLOCK_PHONETIC_EXTENSIONS 66
#define MB_BLOCK_PHONETIC_EXTENSIONS_SUPPLEMENT 67
#define MB_BLOCK_COMBINING_DIACRITICAL_MARKS_SUPPLEMENT 68
#define MB_BLOCK_LATIN_EXTENDED_ADDITIONAL 69
#define MB_BLOCK_GREEK_EXTENDED 70
#define MB_BLOCK_GENERAL_PUNCTUATION 71
#define MB_BLOCK_SUPERSCRIPTS_AND_SUBSCRIPTS 72
#define MB_BLOCK_CURRENCY_SYMBOLS 73
#define MB_BLOCK_COMBINING_DIACRITICAL_MARKS_FOR_SYMBOLS 74
#define MB_BLOCK_LETTERLIKE_SYMBOLS 75
#define MB_BLOCK_NUMBER_FORMS 76
#define MB_BLOCK_ARROWS 77
#define MB_BLOCK_MATHEMATICAL_OPERATORS 78
#define MB_BLOCK_MISCELLANEOUS_TECHNICAL 79
#define MB_BLOCK_CONTROL_PICTURES 80
#define MB_BLOCK_OPTICAL_CHARACTER_RECOGNITION 81
#define MB_BLOCK_ENCLOSED_ALPHANUMERICS 82
#define MB_BLOCK_BOX_DRAWING 83
#define MB_BLOCK_BLOCK_ELEMENTS 84
#define MB_BLOCK_GEOMETRIC_SHAPES 85
#define MB_BLOCK_MISCELLANEOUS_SYMBOLS 86
#define MB_BLOCK_DINGBATS 87
#define MB_BLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A 88
#define MB_BLOCK_SUPPLEMENTAL_ARROWS_A 89
#define MB_BLOCK_BRAILLE_PATTERNS 90
#define MB_BLOCK_SUPPLEMENTAL_ARROWS_B 91
#define MB_BLOCK_MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B 92
#define MB_BLOCK_SUPPLEMENTAL_MATHEMATICAL_OPERATORS 93
#define MB_BLOCK_MISCELLANEOUS_SYMBOLS_AND_ARROWS 94
#define MB_BLOCK_GLAGOLITIC 95
#define MB_BLOCK_LATIN_EXTENDED_C 96
#define MB_BLOCK_COPTIC 97
#define MB_BLOCK_GEORGIAN_SUPPLEMENT 98
#define MB_BLOCK_TIFINAGH 99
#define MB_BLOCK_ETHIOPIC_EXTENDED 100
#define MB_BLOCK_CYRILLIC_EXTENDED_A 101
#define MB_BLOCK_SUPPLEMENTAL_PUNCTUATION 102
#define MB_BLOCK_CJK_RADICALS_SUPPLEMENT 103
#define MB_BLOCK_KANGXI_RADICALS 104
#define MB_BLOCK_IDEOGRAPHIC_DESCRIPTION_CHARACTERS 105
#define MB_BLOCK_CJK_SYMBOLS_AND_PUNCTUATION 106
#define MB_BLOCK_HIRAGANA 107
#define MB_BLOCK_KATAKANA 108
#define MB_BLOCK_BOPOMOFO 109
#define MB_BLOCK_HANGUL_COMPATIBILITY_JAMO 110
#define MB_BLOCK_KANBUN 111
#define MB_BLOCK_BOPOMOFO_EXTENDED 112
#define MB_BLOCK_CJK_STROKES 113
#define MB_BLOCK_KATAKANA_PHONETIC_EXTENSIONS 114
#define MB_BLOCK_ENCLOSED_CJK_LETTERS_AND_MONTHS 115
#define MB_BLOCK_CJK_COMPATIBILITY 116
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A 117
#define MB_BLOCK_YIJING_HEXAGRAM_SYMBOLS 118
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS 119
#define MB_BLOCK_YI_SYLLABLES 120
#define MB_BLOCK_YI_RADICALS 121
#define MB_BLOCK_LISU 122
#define MB_BLOCK_VAI 123
#define MB_BLOCK_CYRILLIC_EXTENDED_B 124
#define MB_BLOCK_BAMUM 125
#define MB_BLOCK_MODIFIER_TONE_LETTERS 126
#define MB_BLOCK_LATIN_EXTENDED_D 127
#define MB_BLOCK_SYLOTI_NAGRI 128
#define MB_BLOCK_COMMON_INDIC_NUMBER_FORMS 129
#define MB_BLOCK_PHAGS_PA 130
#define MB_BLOCK_SAURASHTRA 131
#define MB_BLOCK_DEVANAGARI_EXTENDED 132
#define MB_BLOCK_KAYAH_LI 133
#define MB_BLOCK_REJANG 134
#define MB_BLOCK_HANGUL_JAMO_EXTENDED_A 135
#define MB_BLOCK_JAVANESE 136
#define MB_BLOCK_MYANMAR_EXTENDED_B 137
#define MB_BLOCK_CHAM 138
#define MB_BLOCK_MYANMAR_EXTENDED_A 139
#define MB_BLOCK_TAI_VIET 140
#define MB_BLOCK_MEETEI_MAYEK_EXTENSIONS 141
#define MB_BLOCK_ETHIOPIC_EXTENDED_A 142
#define MB_BLOCK_LATIN_EXTENDED_E 143
#define MB_BLOCK_CHEROKEE_SUPPLEMENT 144
#define MB_BLOCK_MEETEI_MAYEK 145
#define MB_BLOCK_HANGUL_SYLLABLES 146
#define MB_BLOCK_HANGUL_JAMO_EXTENDED_B 147
#define MB_BLOCK_HIGH_SURROGATES 148
#define MB_BLOCK_HIGH_PRIVATE_USE_SURROGATES 149
#define MB_BLOCK_LOW_SURROGATES 150
#define MB_BLOCK_PRIVATE_USE_AREA 151
#define MB_BLOCK_CJK_COMPATIBILITY_IDEOGRAPHS 152
#define MB_BLOCK_ALPHABETIC_PRESENTATION_FORMS 153
#define MB_BLOCK_ARABIC_PRESENTATION_FORMS_A 154
#define MB_BLOCK_VARIATION_SELECTORS 155
#define MB_BLOCK_VERTICAL_FORMS 156
#define MB_BLOCK_COMBINING_HALF_MARKS 157
#define MB_BLOCK_CJK_COMPATIBILITY_FORMS 158
#define MB_BLOCK_SMALL_FORM_VARIANTS 159
#define MB_BLOCK_ARABIC_PRESENTATION_FORMS_B 160
#define MB_BLOCK_HALFWIDTH_AND_FULLWIDTH_FORMS 161
#define MB_BLOCK_SPECIALS 162
#define MB_BLOCK_LINEAR_B_SYLLABARY 163
#define MB_BLOCK_LINEAR_B_IDEOGRAMS 164
#define MB_BLOCK_AEGEAN_NUMBERS 165
#define MB_BLOCK_ANCIENT_GREEK_NUMBERS 166
#define MB_BLOCK_ANCIENT_SYMBOLS 167
#define MB_BLOCK_PHAISTOS_DISC 168
#define MB_BLOCK_LYCIAN 169
#define MB_BLOCK_CARIAN 170
#define MB_BLOCK_COPTIC_EPACT_NUMBERS 171
#define MB_BLOCK_OLD_ITALIC 172
#define MB_BLOCK_GOTHIC 173
#define MB_BLOCK_OLD_PERMIC 174
#define MB_BLOCK_UGARITIC 175
#define MB_BLOCK_OLD_PERSIAN 176
#define MB_BLOCK_DESERET 177
#define MB_BLOCK_SHAVIAN 178
#define MB_BLOCK_OSMANYA 179
#define MB_BLOCK_OSAGE 180
#define MB_BLOCK_ELBASAN 181
#define MB_BLOCK_CAUCASIAN_ALBANIAN 182
#define MB_BLOCK_LINEAR_A 183
#define MB_BLOCK_CYPRIOT_SYLLABARY 184
#define MB_BLOCK_IMPERIAL_ARAMAIC 185
#define MB_BLOCK_PALMYRENE 186
#define MB_BLOCK_NABATAEAN 187
#define MB_BLOCK_HATRAN 188
#define MB_BLOCK_PHOENICIAN 189
#define MB_BLOCK_LYDIAN 190
#define MB_BLOCK_MEROITIC_HIEROGLYPHS 191
#define MB_BLOCK_MEROITIC_CURSIVE 192
#define MB_BLOCK_KHAROSHTHI 193
#define MB_BLOCK_OLD_SOUTH_ARABIAN 194
#define MB_BLOCK_OLD_NORTH_ARABIAN 195
#define MB_BLOCK_MANICHAEAN 196
#define MB_BLOCK_AVESTAN 197
#define MB_BLOCK_INSCRIPTIONAL_PARTHIAN 198
#define MB_BLOCK_INSCRIPTIONAL_PAHLAVI 199
#define MB_BLOCK_PSALTER_PAHLAVI 200
#define MB_BLOCK_OLD_TURKIC 201
#define MB_BLOCK_OLD_HUNGARIAN 202
#define MB_BLOCK_HANIFI_ROHINGYA 203
#define MB_BLOCK_RUMI_NUMERAL_SYMBOLS 204
#define MB_BLOCK_YEZIDI 205
#define MB_BLOCK_OLD_SOGDIAN 206
#define MB_BLOCK_SOGDIAN 207
#define MB_BLOCK_CHORASMIAN 208
#define MB_BLOCK_ELYMAIC 209
#define MB_BLOCK_BRAHMI 210
#define MB_BLOCK_KAITHI 211
#define MB_BLOCK_SORA_SOMPENG 212
#define MB_BLOCK_CHAKMA 213
#define MB_BLOCK_MAHAJANI 214
#define MB_BLOCK_SHARADA 215
#define MB_BLOCK_SINHALA_ARCHAIC_NUMBERS 216
#define MB_BLOCK_KHOJKI 217
#define MB_BLOCK_MULTANI 218
#define MB_BLOCK_KHUDAWADI 219
#define MB_BLOCK_GRANTHA 220
#define MB_BLOCK_NEWA 221
#define MB_BLOCK_TIRHUTA 222
#define MB_BLOCK_SIDDHAM 223
#define MB_BLOCK_MODI 224
#define MB_BLOCK_MONGOLIAN_SUPPLEMENT 225
#define MB_BLOCK_TAKRI 226
#define MB_BLOCK_AHOM 227
#define MB_BLOCK_DOGRA 228
#define MB_BLOCK_WARANG_CITI 229
#define MB_BLOCK_DIVES_AKURU 230
#define MB_BLOCK_NANDINAGARI 231
#define MB_BLOCK_ZANABAZAR_SQUARE 232
#define MB_BLOCK_SOYOMBO 233
#define MB_BLOCK_PAU_CIN_HAU 234
#define MB_BLOCK_BHAIKSUKI 235
#define MB_BLOCK_MARCHEN 236
#define MB_BLOCK_MASARAM_GONDI 237
#define MB_BLOCK_GUNJALA_GONDI 238
#define MB_BLOCK_MAKASAR 239
#define MB_BLOCK_LISU_SUPPLEMENT 240
#define MB_BLOCK_TAMIL_SUPPLEMENT 241
#define MB_BLOCK_CUNEIFORM 242
#define MB_BLOCK_CUNEIFORM_NUMBERS_AND_PUNCTUATION 243
#define MB_BLOCK_EARLY_DYNASTIC_CUNEIFORM 244
#define MB_BLOCK_EGYPTIAN_HIEROGLYPHS 245
#define MB_BLOCK_EGYPTIAN_HIEROGLYPH_FORMAT_CONTROLS 246
#define MB_BLOCK_ANATOLIAN_HIEROGLYPHS 247
#define MB_BLOCK_BAMUM_SUPPLEMENT 248
#define MB_BLOCK_MRO 249
#define MB_BLOCK_BASSA_VAH 250
#define MB_BLOCK_PAHAWH_HMONG 251
#define MB_BLOCK_MEDEFAIDRIN 252
#define MB_BLOCK_MIAO 253
#define MB_BLOCK_IDEOGRAPHIC_SYMBOLS_AND_PUNCTUATION 254
#define MB_BLOCK_TANGUT 255
#define MB_BLOCK_TANGUT_COMPONENTS 256
#define MB_BLOCK_KHITAN_SMALL_SCRIPT 257
#define MB_BLOCK_TANGUT_SUPPLEMENT 258
#define MB_BLOCK_KANA_SUPPLEMENT 259
#define MB_BLOCK_KANA_EXTENDED_A 260
#define MB_BLOCK_SMALL_KANA_EXTENSION 261
#define MB_BLOCK_NUSHU 262
#define MB_BLOCK_DUPLOYAN 263
#define MB_BLOCK_SHORTHAND_FORMAT_CONTROLS 264
#define MB_BLOCK_BYZANTINE_MUSICAL_SYMBOLS 265
#define MB_BLOCK_MUSICAL_SYMBOLS 266
#define MB_BLOCK_ANCIENT_GREEK_MUSICAL_NOTATION 267
#define MB_BLOCK_MAYAN_NUMERALS 268
#define MB_BLOCK_TAI_XUAN_JING_SYMBOLS 269
#define MB_BLOCK_COUNTING_ROD_NUMERALS 270
#define MB_BLOCK_MATHEMATICAL_ALPHANUMERIC_SYMBOLS 271
#define MB_BLOCK_SUTTON_SIGNWRITING 272
#define MB_BLOCK_GLAGOLITIC_SUPPLEMENT 273
#define MB_BLOCK_NYIAKENG_PUACHUE_HMONG 274
#define MB_BLOCK_WANCHO 275
#define MB_BLOCK_MENDE_KIKAKUI 276
#define MB_BLOCK_ADLAM 277
#define MB_BLOCK_INDIC_SIYAQ_NUMBERS 278
#define MB_BLOCK_OTTOMAN_SIYAQ_NUMBERS 279
#define MB_BLOCK_ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS 280
#define MB_BLOCK_MAHJONG_TILES 281
#define MB_BLOCK_DOMINO_TILES 282
#define MB_BLOCK_PLAYING_CARDS 283
#define MB_BLOCK_ENCLOSED_ALPHANUMERIC_SUPPLEMENT 284
#define MB_BLOCK_ENCLOSED_IDEOGRAPHIC_SUPPLEMENT 285
#define MB_BLOCK_MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS 286
#define MB_BLOCK_EMOTICONS 287
#define MB_BLOCK_ORNAMENTAL_DINGBATS 288
#define MB_BLOCK_TRANSPORT_AND_MAP_SYMBOLS 289
#define MB_BLOCK_ALCHEMICAL_SYMBOLS 290
#define MB_BLOCK_GEOMETRIC_SHAPES_EXTENDED 291
#define MB_BLOCK_SUPPLEMENTAL_ARROWS_C 292
#define MB_BLOCK_SUPPLEMENTAL_SYMBOLS_AND_PICTOGRAPHS 293
#define MB_BLOCK_CHESS_SYMBOLS 294
#define MB_BLOCK_SYMBOLS_AND_PICTOGRAPHS_EXTENDED_A 295
#define MB_BLOCK_SYMBOLS_FOR_LEGACY_COMPUTING 296
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B 297
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C 298
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D 299
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_E 300
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_F 301
#define MB_BLOCK_CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT 302
#define MB_BLOCK_CJK_UNIFIED_IDEOGRAPHS_EXTENSION_G 303
#define MB_BLOCK_TAGS 304
#define MB_BLOCK_VARIATION_SELECTORS_SUPPLEMENT 305
#define MB_BLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_A 306
#define MB_BLOCK_SUPPLEMENTARY_PRIVATE_USE_AREA_B 307

/*
 Unicode plane
 [see: https://www.unicode.org/glossary/#plane]
*/
typedef uint8_t mb_plane;

#define MB_PLANE_NUM 17 /* 17 planes */
#define MB_PLANE_SIZE 65536 /* 2^16 code points per plane */

/*
 Unicode encoding
 [see: https://www.unicode.org/glossary/#character_encoding_scheme]
 */
typedef uint32_t mb_encoding;

#define MB_ENCODING_UNKNOWN 0
#define MB_ENCODING_ASCII 0x1
#define MB_ENCODING_UTF_8 0x2
#define MB_ENCODING_UTF_16 0x4
#define MB_ENCODING_UTF_16_BE 0x8
#define MB_ENCODING_UTF_16_LE 0x10
#define MB_ENCODING_UTF_32 0x20
#define MB_ENCODING_UTF_32_BE 0x40
#define MB_ENCODING_UTF_32_LE 0x80

#ifdef __cplusplus
extern "C" {
#endif

/* Initialize the library */
bool mb_initialize(const char* filename);

/* The library is ready */
bool mb_ready();

/* Close the library */
bool mb_close();

/* Output the current library version (MB_VERSION) */
char* mb_version();

/* Output the current library version number (MB_VERSION_NUMBER) */
unsigned int mb_version_number();

/* Output the current supported unicode version (MB_UNICODE_VERSION) */
char* mb_unicode_version();

/* Return true if the codepoint is valid */
bool mb_codepoint_is_valid(mb_codepoint codepoint);

/* Return true if the plane is valid */
bool mb_plane_is_valid(mb_plane plane);

/* Return the name of a plane, NULL if the place specified is not valid */
const char* mb_plane_name(mb_plane plane, bool abbreviation);

/* Return the string encoding (the most probable) */
mb_encoding mb_string_encoding(const char* buffer, size_t size);

/* Return true if the string is encoded in UTF-8 */
bool mb_string_is_utf8(const char* buffer, size_t size);

/* Return true if the string is encoded in ASCII */
bool mb_string_is_ascii(const char* buffer, size_t size);

/* Return the codepoint character */
bool mb_codepoint_character(mb_character* character, mb_codepoint codepoint);

#ifdef __cplusplus
}
#endif

#endif /* MB_MOJIBAKE_H */
